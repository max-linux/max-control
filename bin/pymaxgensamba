#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import sys
from configobj import ConfigObj
import ldap
import commands
# from pprint import pprint
import shutil

CONF = "/etc/max-control/conf.inc.php"
SMB_CONF = "/etc/samba/shares.conf"
SSSD_CONF = '/etc/sssd/sssd.conf'
SMB_CONF_BACKUP = "/var/lib/max-control/shares.conf"
SHARED_DIR = "/home/samba/groups/"

if not os.path.isfile(CONF):
    print " * No existe el archivo %s" % (CONF)
    sys.exit(0)

"""
[isos]
 comment = Archivos ISO
 path = /home/samba/shares/isos
 guest ok = yes
 #valid users =
 read list = @"Domain Users"
 write list = @"Teachers"
 admin users =
 read only = No
 browseable = No
 force create mode = 0664
 force directory mode = 0775
"""

TO_EDIT = {
    'homes': {'hide files': '/desktop.ini/$RECYCLE.BIN/*.desktop/.*/',
              'ea support': 'yes',
              'store dos attributes': 'yes',
              'full_audit:success': 'none',
              #'full_audit:success': 'connect opendir open disconnect unlink mkdir rmdir rename',
              'full_audit:failure': 'connect opendir open disconnect unlink mkdir rmdir rename',
              'path': '/home/__DOMAIN__/%S',
              },
    #'print$':{'browseable':'no'},
}

TO_ADD = {'profiles': {'ea support': 'yes',
                       'store dos attributes': 'yes'},

          'global': {'server string': 'MAX server',
                     'full_audit:success': 'none',
                     'full_audit:failure': 'connect opendir open disconnect unlink mkdir rmdir rename',
                     'winbind nss info': 'rfc2307',
                     },
          # 'ebox-internal-backups':{'browseable':'no'},
          # 'ebox-quarantine':{'browseable':'no'},

          'isos': {'comment': 'Archivos ISO',
                   'path': '/home/samba/shares/isos',
                   # 'valid users': ['@"Teachers"', '@"Domain Users"'],
                   'read list': ['@"Teachers"', '@"Domain Users"'],
                   # 'write list': '@"Teachers"',
                   'write list': ['@"Teachers"', '@"Domain Admins"'],
                   # 'read list': '@"Domain Users"',
                   'admin users': '@"Domain Admins"',
                   'guest ok':  'yes',
                   'read only': 'no',
                   'browseable': 'no',
                   'force create mode': '0664',
                   'force directory mode': '0775',
                   }
          }

NOT_VALID_KEYS = ['global', 'netlogon', 'profiles', 'sysvol', 'homes', 'print$', 'isos']
HIDDEN_GROUPS = ['Instaladores',
                 'CoordinadoresTIC',
                 'Teachers',
                 'Allowed RODC Password Replication Group',
                 'Enterprise Read-only Domain Controllers',
                 'Denied RODC Password Replication Group',
                 'Read-only Domain Controllers',
                 'Group Policy Creator Owners',
                 'RAS and IAS Servers',
                 'Domain Controllers',
                 'Enterprise Admins',
                 'Domain Computers',
                 'Cert Publishers',
                 'DnsUpdateProxy',
                 'Domain Admins',
                 'Domain Guests',
                 'Schema Admins',
                 'Domain Users',
                 'DnsAdmins']


def read_conf(varname):
    f = open(CONF, 'r')
    data = f.readlines()
    f.close()

    for line in data:
        if line.startswith('define') and varname in line:
            if len(line.split('"')) >= 3:
                return line.split('"')[3]
            if len(line.split("'")) >= 3:
                return line.split("'")[3]
    return ''

GROUPS = read_conf('LDAP_OU_GROUPS')
DOMAIN = read_conf('LDAP_DOMAIN')
WORKGROUP = read_conf('WORKGROUP')


# hack to change samba users home dir
TO_EDIT['homes']['path'] = "/home/%s/%%S" % WORKGROUP
TO_ADD['global']['template homedir'] = "/home/%s/%%S" % WORKGROUP


def getGroupsShares():
    sharedgroups = []
    l = ldap.initialize('ldap://localhost:389')
    #print read_conf("LDAP_BINDDN"), read_conf("LDAP_BINDPW")
    l.simple_bind_s(read_conf("LDAP_BINDDN"), read_conf("LDAP_BINDPW"))
    results = l.search_s(GROUPS, ldap.SCOPE_SUBTREE, '(objectclass=group)', ['cn', 'member', 'gidNumber'])

    # pprint(results)

    for group in results:
        if "Teachers" in group[0]:
            continue

        groupname = group[1]['cn'][0]

        if not groupname in HIDDEN_GROUPS:
            sharedgroups.append(groupname)
            # print group
    # pprint(sharedgroups)
    return sharedgroups


class MyConfigObj (ConfigObj):
    def _write_line(self, indent_string, entry, this_entry, comment):
        """Write an individual line, for the write method"""
        # NOTE: the calls to self._quote here handles non-StringType values.
        if not self.unrepr:
            val = self._decode_element(self._quote(this_entry))
        else:
            val = repr(this_entry)

        # delete simple quote from groups names
        if "@" in val:
            val = val.replace("'", "")

        # add space before varname
        indent_string = '    '

        return '%s%s%s%s%s' % (
            indent_string,
            self._decode_element(self._quote(entry, multiline=False)),
            self._a_to_u(' = '),
            val,
            self._decode_element(comment))


def newGroupShare(groupname, readonly):
    """
    [grupoprueba]
     comment = "grupoprueba share directory"
     path = /home/samba/groups/grupoprueba
     valid users = @"grupoprueba"
     force group = "grupoprueba"
     force create mode = 0660
     force directory mode = 0660
     printable = no
     read only = no
     browseable = yes
    # FIXME: Removed for samba 3.4.3, add again when a new version fixes it
    #% my $objects = 'full_audit';
     vfs objects =  recycle
     recycle: versions = yes
     recycle: repository = RecycleBin
     recycle: keeptree = yes
     recycle: excludedir = /tmp|/var/tmp
     recycle: directory_mode = 0700

     [aaaa]
        comment = aaaa
        path = /home/samba/shares/aaaa
        browseable = Yes
        read only = No
        force create mode = 0660
        force directory mode = 0660
        vfs objects = acl_xattr full_audit
        acl_xattr:ignore system acls = yes
        full_audit:success = connect opendir disconnect unlink mkdir rmdir open rename
        full_audit:failure = connect opendir disconnect unlink mkdir rmdir open rename

    [test2]
        comment = compartido por test2
        read list = @"Domain Admins", @"test2"
        printable = no
        write list = @"Domain Admins", @"Teachers"
        force create mode = 0660
        valid users = @"Domain Admins", @"test2"
        path = /home/samba/groups/test2
        read only = no
        browseable = yes
        force directory mode = 0770
        admin users = @"Domain Admins"
        force group = test2

    """
    #
    # readonly (for puppils) is read from st_mode
    #    * 17405 readonly false
    #    * 17401 readonly true
    #
    share = {"comment": "compartido por %s" % groupname,
             "path": os.path.join(SHARED_DIR, groupname),
             "browseable": "yes",
             "force create mode": "0660",
             "force directory mode": "0770",
             "read only": "no",
             "vfs objects": "acl_xattr full_audit",
             "acl_xattr:ignore system acls": "yes",
             "full_audit:success": "none",
             "full_audit:failure": "connect opendir disconnect unlink mkdir rmdir open rename",
             #"valid users": '@"%s"'%groupname,
             # "valid users": ['@"Domain Admins"', '@"%s"' % groupname],
             "force group": "%s" % groupname,
             "read list":  ['@"Domain Admins"', '@"%s"' % groupname],
             "write list": ['@"Domain Admins"', '@"%s"' % groupname],
             "admin users": '@"Domain Admins"',
             # "printable": "no",
             }
    if readonly == 1:
        print " * Group %s readonly for puppils." % groupname
        share["write list"] = ['@"Domain Admins"', '@"Teachers"']
    return share


#
smb = MyConfigObj(SMB_CONF)
#
for key in TO_EDIT:
    for attr in TO_EDIT[key]:
        #print attr, "=" ,TO_EDIT[key][attr]
        smb[key][attr] = TO_EDIT[key][attr]
#
for key in TO_ADD:
    smb[key] = TO_ADD[key]
    if key in ['homes', 'profiles']:
        continue
    # FIXME isos owned by teachers
    result = commands.getstatusoutput("max-control createshared '%s' 'Teachers'" % key)
    #print "createshared ",key, " = " ,result
    if key not in NOT_VALID_KEYS:
        print " * Create shared", key

# write before LDAP connection
smb.write()

# delete not needed dir
# os.system("rm -rf %s/homes" %SHARED_DIR)

try:
    ALL_GROUPS = getGroupsShares()
except ldap.SERVER_DOWN:
    # use backup if exists
    if os.path.isfile(SMB_CONF_BACKUP):
        shutil.copy2(SMB_CONF_BACKUP, SMB_CONF)
        sys.exit(0)


for group in ALL_GROUPS:
    if group in NOT_VALID_KEYS:
        # no create special sections
        continue

    # if exists check permisos
    groupdir = os.path.join(SHARED_DIR, group)
    if os.path.isdir(groupdir):
        #
        # readonly (for puppils) is read from st_mode
        #    * 17405 readonly false
        #    * 17401 readonly true
        #
        readonly = 0
        if os.stat(groupdir).st_mode == 17401:
            readonly = 1
        smb[group] = newGroupShare(group, readonly)
        result = commands.getstatusoutput("max-control addgroup '%s' '%s'" % (group, readonly))
        #print "addgroup ", group, " = " ,result
        print " * Add group", group


for group in HIDDEN_GROUPS:
    try:
        del(smb[group])
    except:
        pass

# import pprint
# pprint.pprint(smb)

smb.write()

# write backup file
shutil.copy2(SMB_CONF, SMB_CONF_BACKUP)


# # test if smb.conf have include line
# f=open('/etc/samba/smb.conf', 'r')
# data=f.readlines()
# f.close()

# have_include=False
# for line in data:
#     if "include = /etc/samba/max-control.conf" in line:
#         have_include=True

# if not have_include:
#     f=open('/etc/samba/smb.conf', 'a')
#     f.write("\ninclude = /etc/samba/max-control.conf\n")
#     f.close()

# if 'SUDO_USER' in os.environ and os.environ['SUDO_USER'] == 'ebox':
#     print "Running pymaxgensamba FROM ebox user ..."
#     sys.exit(0)

#print " * Restarting samba ..."
#commands.getstatusoutput("/etc/init.d/zentyal samba restart")
#reloadSamba()
"""
[domain/madrid.lan]
    fallback_homedir = /home/%u
    default_shell = /bin/bash

"""
if os.path.exists(SSSD_CONF):
    sssd = MyConfigObj(SSSD_CONF)
    # pprint(sssd)
    sssd["domain/%s" % DOMAIN.lower()]["fallback_homedir"] = "/home/%s/%%S" % WORKGROUP
    sssd["domain/%s" % DOMAIN.lower()]["default_shell"] = "/bin/false"
    # pprint(sssd)
    sssd.write()
#
#
# Reload samba
if "reloadsamba" in sys.argv:
    # reloadSamba()
    os.system("smbcontrol all reload-config > /dev/null 2>&1")
