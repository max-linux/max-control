#!/bin/sh
#
#
#
#


PROFILES_DIR="/home/samba/profiles/"
GROUPS_DIR="/home/samba/groups/"
SHARED_DIR="/home/samba/shares/"

LOCK_FILE="/var/lib/max-control/max-control-run.lock"
MAX_WAIT=20

WORKGROUP=$(dnsdomainname -d | awk -F"." '{print toupper($1)}')
HOMES_DIR="/home/${WORKGROUP}"

echo_exit(){
    echo $@
    exit 1
}

WAIT=0

max_control_need_wait() {
    while [ -f $LOCK_FILE ]; do
        sleep 1
        WAIT=$((WAIT+1))
        echo "max-control[$$]: waiting ($@)"
        if [ $WAIT -ge $MAX_WAIT ]; then
            #echo_exit "locked"
            rm -f $LOCK_FILE
        fi
    done
}

create_lock() {
    max_control_need_wait
    touch $LOCK_FILE
}



on_exit() {
    #echo "remove lock"
    rm -f $LOCK_FILE
}


trap on_exit EXIT
trap on_exit INT
trap on_exit QUIT
trap on_exit TERM

#touch $LOCK_FILE



case $1 in
    adduser)
        # username and surname
        NEWUSER=$2
        NAME=$3
        SURNAME=$4
        # password
        PASSWD=$5
        ROLE=$6
        USHELL=$7
        DESCRIPTION=$8

        # '$cn' '$givenname' '$sn' '$password' '$role' '$loginshell' '$description' 
        #   2          3        4      5          6           7            8

        if getent passwd "${NEWUSER}" >/dev/null 2>&1 ; then
            echo_exit "exists"
        fi

        create_lock

        USHELL="/bin/false"
        if [ "${USHELL}" = "" ]; then
            USHELL="/bin/false"
        fi

        QUOTA=2000
        case $ROLE in
            admin)
                QUOTA=$((QUOTA*2))
            ;;
            teacher)
                QUOTA=$((QUOTA*2))
            ;;
        esac

        #set -x
        set -e

        export MUSERNAME="${NEWUSER}"
        export PASSWORD="${PASSWD}"
        export NAME="${NAME}"
        export SURNAME="${SURNAME}"
        export DESCRIPTION="${DESCRIPTION:-sin-descripcion}"
        export ROLE="${ROLE}"
        export USHELL="${USHELL}"
        export QUOTA="${QUOTA}"

        zentyal-maxcontrol adduser

        # create home and profiles
        max-control resetprofile "${NEWUSER}" >/dev/null 2>&1

        echo 'OK'
        exit 0
        ;;

################################################################################
    chpasswd)
        # username and surname
        USER=$2
        PASS=$3

        create_lock

        echo "${USER}:${PASS}" | chpasswd
        samba-tool user setpassword "${USER}" --newpassword="${PASS}" >/dev/null 2>&1 && echo 'OK'
        exit 0
        ;;
################################################################################
    deluser)
        
        create_lock

        set -e
        export MUSERNAME="${2}"
        zentyal-maxcontrol deluser
        echo 'OK'
        exit 0

        # DELUSER=$2
        # samba-tool user delete "$DELUSER" >/dev/null 2>&1 && echo 'OK'
        # deluser "$DELUSER" >/dev/null 2>&1
        # exit 0
        ;;
################################################################################
    addcomputer)
        # username and surname
        NAME="$(echo $2| tr '[:lower:]' '[:upper:]')"
        IP=$3

        # listar todos los registros DNS
        # host -t A -l madrid.local


        DN="$(dnsdomainname)"
        LDAP_ADMIN="$(awk -F"'" '/LDAP_ADMIN/ {print $2}' /etc/max-control/conf.inc.php)"
        LDAP_PASSW="$(awk -F"'" '/LDAP_PASS/ {print $2}' /etc/max-control/conf.inc.php)"

        echo samba-tool dns add 127.0.0.1 "${DN}" "${NAME}" A "${IP}" -U${LDAP_ADMIN}:${LDAP_PASSW}

        exit 0
        ;;
################################################################################
    addaula)
        NEW=$2
        DESC="${3:-aula}"

        create_lock


        samba-tool group add "${NEW}" \
                   --groupou=CN=Computers \
                   --group-scope=Domain \
                   --group-type=Security \
                   --description="${DESC}" 2>&1 && echo 'OK'
        exit 0
        ;;
################################################################################
    delaula)
        DEL=$2
        
        create_lock


        samba-tool group delete "${DEL}" 2>&1 && echo 'OK'
        exit 0
        ;;
################################################################################
    delmember)
        # username and surname
        GROUP=$2
        MEMBER=$3

        create_lock

        samba-tool group removemembers "${GROUP}" "${MEMBER}" >/dev/null 2>&1 && echo 'OK'
        exit 0
        ;;
################################################################################
    addmember)
        # username and surname
        GROUP=$2
        MEMBER=$3

        create_lock

        samba-tool group addmembers "${GROUP}" "${MEMBER}" >/dev/null 2>&1 && echo 'OK'
        exit 0
        ;;
################################################################################
    createhome)
        # username
        NEWUSER=$2
        # quota in MB
        QUOTA=$3
        # mkdir -p "$HOMES_DIR/${NEWUSER}"
        # chown "${NEWUSER}":"Domain Users" "${HOMES_DIR}/${NEWUSER}"
        # chmod 700 "${HOMES_DIR}/${NEWUSER}"

        # profile
        mkdir -p "${PROFILES_DIR}/${NEWUSER}"
        chown "${NEWUSER}":"Domain Users" "${PROFILES_DIR}/${NEWUSER}"
        chmod 700 "${PROFILES_DIR}/${NEWUSER}"

        #mkdir -p "${PROFILES_DIR}/${NEWUSER}.V2"
        #chown "${NEWUSER}":"Domain Users" "${PROFILES_DIR}/${NEWUSER}.V2"
        #chmod 701 "${PROFILES_DIR}/${NEWUSER}.V2"

        if id "${NEWUSER}" 2>/dev/null | grep -q -e "Teachers" -e "Domain Admins"; then
            QUOTA=$((QUOTA*2))
        fi


        # set quota
        #/usr/share/ebox-samba/ebox-samba-quota -s ${NEWUSER} ${QUOTA}
        /usr/bin/edit.quotas --set --user="${NEWUSER}" --size=${QUOTA}
        exit 0
        ;;
################################################################################
    requota)
        NEWUSER=$2
        QUOTA=$3

        create_lock
        # set quota
        #/usr/share/ebox-samba/ebox-samba-quota -s ${NEWUSER} ${QUOTA}
        /usr/bin/edit.quotas --set --user="${NEWUSER}" --size="${QUOTA}"
        /usr/bin/pyoverquota >> /var/log/max-control-pxe.log 2>&1
        exit 0
        ;;
################################################################################
    recache)
        if [ -e /var/lib/max-control/quota.cache.php.new ]; then
            # exit if updating quotas
            exit 0
        fi
        if [ -x /usr/bin/pyoverquota ]; then
            pyoverquota >> /var/log/max-control-pxe.log 2>&1
        fi
        exit 0
        ;;
################################################################################
    deleteprofile)
        DELUSER=$2
        [ "${DELUSER}" = "" ] && echo_exit "nonexists"
        rm -rf "${HOMES_DIR}/${DELUSER}" \
               "${PROFILES_DIR}/${DELUSER}" \
               "${PROFILES_DIR}/${DELUSER}.V2" \
               "${PROFILES_DIR}/${DELUSER}.V6"
        echo "ok"
        exit 0
        ;;
################################################################################
    resetprofile)
        DELUSER=$2
        [ "${DELUSER}" = "" ] && echo_exit "nonexists"
        set -e
        # rm -rf "$HOMES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}.V2" 2>/dev/null
        # mkdir -p "$HOMES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}.V2" 2>/dev/null
        #
        GIDNUM=$(id -g ${DELUSER})
        #
        for p in "${HOMES_DIR}/${DELUSER}" \
                 "${PROFILES_DIR}/${DELUSER}" \
                 "${PROFILES_DIR}/${DELUSER}.V2" \
                 "${PROFILES_DIR}/${DELUSER}.V6"; do
            #
            #
            rm -rf "${p}" 2>/dev/null
            mkdir -p "${p}" 2>/dev/null
            chown "${DELUSER}":"Domain Users" "${p}"
            #
            #
            setfacl -b "${p}"    2>&1
            setfacl -R -m u:root:rwx,g::---,g:${GIDNUM}:---,u:${DELUSER}:rwx "${p}" 2>&1
            setfacl -R -m d:u:root:rwx,d:g::---,d:g:${GIDNUM}:---,d:u:${DELUSER}:rwx "${p}" 2>&1
            #
            chmod 700 "${p}"
            #
        done
        # rm -rf "${HOMES_DIR}/${DELUSER}" \
        #        "${PROFILES_DIR}/${DELUSER}" \
        #        "{PROFILES_DIR}/${DELUSER}.V2" \
        #        "{PROFILES_DIR}/${DELUSER}.V6" 2>/dev/null
        # #
        # mkdir -p "${HOMES_DIR}/${DELUSER}" \
        #          "${PROFILES_DIR}/${DELUSER}" \
        #          "{PROFILES_DIR}/${DELUSER}.V2" \
        #          "{PROFILES_DIR}/${DELUSER}.V6" 2>/dev/null

        # arreglar permisos
        # chown "${DELUSER}":"Domain Users" "${HOMES_DIR}/${DELUSER}"
        # chmod 700 "${HOMES_DIR}/${DELUSER}"
        # chown "${DELUSER}":"Domain Users" "${PROFILES_DIR}/${DELUSER}"
        # chmod 700 "${PROFILES_DIR}/${DELUSER}"
        #
        # push (@perms, 'u:root:rwx');
        # push (@perms, 'g::---');
        # push (@perms, "g:$gidNumber:---");
        # push (@perms, "u:$samAccountName:rwx");
        # push (@cmds, "setfacl -b \'$path\'");
        # push (@cmds, 'setfacl -R -m ' . join(',', @perms) . " \'$path\'");
        # push (@cmds, 'setfacl -R -m d:' . join(',d:', @perms) ." \'$path\'");
        # GIDNUM=$(id -g ${DELUSER})
        # #
        # setfacl -b "${PROFILES_DIR}/${DELUSER}"    2>&1
        # setfacl -R -m u:root:rwx,g::---,g:${GIDNUM}:---,u:${DELUSER}:rwx "${PROFILES_DIR}/${DELUSER}" 2>&1
        # setfacl -R -m d:u:root:rwx,d:g::---,d:g:${GIDNUM}:---,d:u:${DELUSER}:rwx "${PROFILES_DIR}/${DELUSER}" 2>&1

        #
        /usr/bin/pyoverquota >> /var/log/max-control-pxe.log 2>&1
        echo 'OK'
        exit 0
        ;;
################################################################################
    addgroup)
        ADDGROUP=$2
        CREATESHARED=$3
        READONLY=$4
        DESC=$5

        create_lock

        [ "${2}" = "" ] && echo_exit "nonexists"

        set -e
        # set -x

        export NAME="${2}"
        export CREATESHARED="${3}"
        export READONLY="${4}"
        export DESCRIPTION="${5:-sin-descripcion}"
        
        getent group "$2" >/dev/null && echo_exit "exists"
        zentyal-maxcontrol addgroup


        if [ "${CREATESHARED}" = "1" ]; then
            mkdir -p "${GROUPS_DIR}/${NAME}"
            chown administrator:adm "${GROUPS_DIR}/${NAME}"
            chmod 775 "${GROUPS_DIR}/${NAME}"
            # chmod +t "${GROUPS_DIR}/${NAME}"
            # chmod g+w "${GROUPS_DIR}/${NAME}"
            [ "${READONLY}" = "1" ] && chmod o-r "${GROUPS_DIR}/${NAME}"


            # [test2]
            #     comment = compartido por test2
            #     read list = @"Domain Admins", @"test2"
            #     printable = no
            #     write list = @"Domain Admins", @"Teachers"
            #     force create mode = 0660
            #     valid users = @"Domain Admins", @"test2"
            #     path = /home/samba/groups/test2
            #     read only = no
            #     browseable = yes
            #     force directory mode = 0770
            #     admin users = @"Domain Admins"
            #     force group = test2

            # # file: home/samba/shares/aaaa
            # # owner: administrator
            # # group: adm
            # user::rwx
            # user:administrator:rwx
            # user:3000002:rwx
            # 
            # group::rwx
            # group:adm:rwx
            # group:domain\040admins:rwx
            # group:teachers:rwx
            # group:test2:r-x
            # group:3000002:rwx
            # 
            # mask::rwx
            # other::---
            # 
            # default:user::rwx
            # default:user:administrator:rwx
            # default:user:3000002:rwx
            # default:group::---
            # default:group:adm:rwx
            # default:group:domain\040admins:rwx
            # default:group:teachers:rwx
            # default:group:test2:r-x
            # default:group:3000002:rwx
            # default:mask::rwx
            # default:other::---
            # 
            # 
            # 
            # getfacl -t /home/samba/shares/aaaa/
            # # file: home/samba/shares/aaaa/
            # USER   administrator  rwx  rwx
            # user   administrator  rwx  rwx
            # user   3000002        rwx  rwx
            # GROUP  adm            rwx  ---
            # group  adm            rwx  rwx
            # group  domain admins  rwx  rwx
            # group  teachers       rwx  rwx
            # group  test2          r-x  r-x
            # group  3000002        rwx  rwx
            # mask                  rwx  rwx
            # other                 ---  ---

            setfacl -R -b "${GROUPS_DIR}/${NAME}" 2>&1
            setfacl -R -m \
u:administrator:rwx,\
g::---,\
g:adm:---,\
g:"Domain Admins":rwx,\
g:3000002:rwx,\
g:"Teachers":rwx,\
g:"${NAME}":r-x,\
other:---                      "${GROUPS_DIR}/${NAME}" 2>&1

            setfacl -R -m \
d:u:administrator:rwx,\
d:g::---,\
d:g:adm:---,\
d:g:"Domain Admins":rwx,\
d:g:3000002:rwx,\
d:g:"Teachers":rwx,\
d:g:"${NAME}":r-x                     "${GROUPS_DIR}/${NAME}" 2>&1
        fi

        echo 'OK'
        exit 0



        
        if ! samba-tool group add "${ADDGROUP}" \
                        --groupou=CN=Users \
                        --group-scope=Global \
                        --group-type=Security \
                        --description="${DESC}" 2>&1; then
            echo 'error'
            exit
        fi

        mkdir -p "${GROUPS_DIR}/${ADDGROUP}"
        chown root:"${ADDGROUP}" "${GROUPS_DIR}/${ADDGROUP}"
        chmod +t "${GROUPS_DIR}/${ADDGROUP}"
        chmod g+w "${GROUPS_DIR}/${ADDGROUP}"
        [ "${READONLY}" = "1" ] && chmod o-r "${GROUPS_DIR}/${ADDGROUP}"
        echo "ok"
        exit 0
        ;;
################################################################################
    isreadonly)
        # $2 is groupname
        # readonly (for puppils) is read from st_mode
        #    * 17405 readonly 0
        #    * 17401 readonly 1
        #
        ST_MODE=$(python -c 'import os,sys; print os.stat(sys.argv[1]).st_mode' "${GROUPS_DIR}/${2}" 2>&1)
        if [ "$ST_MODE" = "17401" ]; then
            echo "1"
        else
            echo "0"
        fi
        exit
        ;;
################################################################################
    deletegroup)
        DELGROUP=$2
        DELDIR=$3
        [ "${DELGROUP}" = "" ] && echo_exit "nonexists"

        samba-tool group delete "${DELGROUP}"

        if [ "$DELDIR" = "1" ]; then
            rm -rf "$GROUPS_DIR/${DELGROUP}"
        fi

        echo "ok"
        exit 0
        ;;
################################################################################
    getdefaultquota)
        #DEF=$(grep '"userquota_size"' /var/lib/ebox/gconf/ebox/modules/samba/GeneralSettings/%gconf.xml 2>/dev/null | awk -F '"' '{print $8}')
        DEF=$(/usr/share/max-control/getDefaultQuota.pm 2>/dev/null)

        if [ "$DEF" = "" ]; then
            echo 2000
        else
            echo ${DEF}
        fi
        exit 0
        ;;
################################################################################
    getquota)
        /usr/bin/edit.quotas --getused --user=$2  
        exit 0
        ;;
################################################################################
    getdomainsid)
        net getdomainsid
        exit 0
        ;;
################################################################################
    genlogonshares)
        #pygenlogonshares 'ou=Groups,dc=max-server'
        pygenlogonshares
        unix2dos /home/samba/netlogon/shares.kix >/dev/null 2>&1
        echo "ok"
        exit 0
        ;;
################################################################################
    gensamba)
        pymaxgensamba reloadsamba 2>&1
        echo "ok"
        exit 0
        ;;
################################################################################
    pxe)
        args=$@
        ARGS=${args##pxe}
        pyboot ${ARGS}
        exit 0
        ;;
################################################################################
    isos)
        args=$@
        ARGS=${args##isos}
        pyisos ${ARGS}
        exit 0
        ;;
################################################################################
    delcomputer)
        smbpasswd -x "$2" 2>&1
        exit 0
        ;;
################################################################################
    gethostnameip)
        HNAME=$2

        # Sep  7 17:14:14 max-control dhcpd[3144]: DHCPACK on 192.168.1.50 to 08:00:27:bf:7f:33 (DESKTOP-044BOTE) via eth1
        IP=$(awk '/DHCPACK.*('$HNAME')/ {print $8}' /var/log/syslog| tail -1)
        echo "$IP"
        exit 0
        ;;
################################################################################
    reloadsamba)
        if testparm -s /etc/samba/smb.conf >/dev/null 2>&1; then
            PIDS=$(pidof smbd)
            for pid in $PIDS; do
                kill -1 $pid
            done
            exit 0
        else
            exit 1
        fi
        ;;
################################################################################
    createshared)
        ADDGROUP=$2
        GROUP=$3
        [ "${ADDGROUP}" = "" ] && echo_exit "nonexists"
        mkdir -p "${SHARED_DIR}/${ADDGROUP}"
        chown root:"${GROUP}" "${SHARED_DIR}/${ADDGROUP}"
        chmod 0775 "${SHARED_DIR}/${ADDGROUP}"
        echo "ok"
        exit 0
        ;;
################################################################################
#    purgewins)
#        /etc/init.d/ebox samba stop
#        rm -f /var/lib/samba/wins.tdb /var/lib/samba/wins.dat
#        /etc/init.d/ebox samba start
#        exit 0
#        ;;
################################################################################
    renamegroup)
        # $2 is oldname
        # $3 is newname
        if [ -d "${GROUPS_DIR}/$3" ]; then
            echo "new exists"
            exit 0
        elif [ -d "${GROUPS_DIR}/$2" ]; then
            mv "${GROUPS_DIR}/$2" "$GROUPS_DIR/$3"
            rm -f /etc/samba/max-control.conf
            pymaxgensamba >/dev/null 2>&1
            echo "ok"
            exit 0
        fi
        echo "no changes"
        exit 0
        ;;
################################################################################
    cleanimporter)
        rm -f /tmp/importer*
        echo "ok"
        exit 0
        ;;
################################################################################
    *)
        echo "unknow_action"
        exit 0
    ;;
esac



