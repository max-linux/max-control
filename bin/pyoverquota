#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import ldap
import os
import sys
#import glob
import time
import subprocess
from subprocess import Popen, PIPE, STDOUT
import commands

os.environ['LC_ALL'] = "C"
os.environ['EDITOR'] = "/bin/cat"

HOME = "/home"
REMOTES = []
REMOTE = commands.getoutput("df /home/samba 2>/dev/null | awk '/dev/ {print $1}'")
REMOTES.append(REMOTE)
REMOTE = commands.getoutput("/sbin/blkid " + REMOTE + " -o value| head -1 | awk '{print \"/dev/disk/by-uuid/\"$1}'")
REMOTES.append(REMOTE)
if REMOTE == "":
    REMOTE = "/dev/nbd0"
    REMOTES.append(REMOTE)

CONF = "/etc/max-control/conf.inc.php"
LIMIT = float(80)  # percent
LOCK_FILE = "/var/lib/max-control/quota.cache.php.lock"
DEST_FILE = "/var/lib/max-control/quota.cache.php"
MAX_WAIT = 50  # 5 seconds
num = 0
stamp = time.strftime("%d/%m/%Y %H:%M:%S", time.localtime())

if not os.path.isfile(CONF):
    print >> sys.stderr, " * No existe el archivo %s" % CONF
    sys.exit(0)

if os.path.isfile("/aquota.user") or os.path.isfile("/quota.user"):
    HOME = "/"

if os.path.isfile("/home/samba/aquota.user") or os.path.isfile("/home/samba/quota.user"):
    HOME = "/home/samba"

if not os.path.isfile(HOME + "/aquota.user") and not os.path.isfile(HOME + "/quota.user"):
    print >> sys.stderr, " * No quotas found"
    sys.exit(0)


# sys.stderr.write("<? /* DEBUG HOME='%s' REMOTES='%s' */ ?>\n" % (HOME, REMOTES))

#######################################################
while os.path.isfile(LOCK_FILE):
    sys.stderr.write("<? /* [%s] pyoverquota[%s]: Esperando lock...*/ ?>\n" % (stamp, os.getpid()))
    if num > MAX_WAIT:
        sys.stderr.write("<? /* [%s] pyoverquota[%s]: Timeout...*/ ?>\n" % (stamp, os.getpid()))
        break
    time.sleep(0.1)
    num = num + 1

sys.stderr.write("<? /* [%s] pyoverquota[%s]: Creando lock...*/ ?>\n" % (stamp, os.getpid()))
# create lock file
open(LOCK_FILE, 'w').close()
#######################################################


#print >> sys.stderr," REMOTE=%s HOME quota=%s"%(REMOTE, HOME)

def read_conf(varname):
    f = open(CONF, 'r')
    data = f.readlines()
    f.close()

    for line in data:
        if line.startswith('define') and varname in line:
            if len(line.split('"')) >= 3:
                return line.split('"')[3]
            if len(line.split("'")) >= 3:
                return line.split("'")[3]
    return ''

try:
    CONF_LIMIT = read_conf("OVERQUOTA_LIMIT")
    if CONF_LIMIT != '':
        LIMIT = float(CONF_LIMIT)
except Exception, err:
    import traceback
    print >> sys.stderr, err
    traceback.print_exc(file=sys.stderr)


def getQuota(user, used=False):
    """
    LC_ALL=C EDITOR=cat edquota -u profesorpruebas -f /home
    Disk quotas for user profesorpruebas (uid 2050):
      Filesystem          blocks       soft       hard     inodes     soft     hard
      /dev/nbd0               12    2048000    2048000          3        0        0
    """
    column = 2
    percent = ""
    if used:
        column = 1
    size = 0
    cmd = "/usr/sbin/edquota -u %s -f %s " % (user, HOME)
    # sys.stderr.write("<? /* getQuota cmd='%s' */ ?>\n" % (cmd))
    p = Popen(cmd, shell=True, bufsize=0, stdout=PIPE, stderr=STDOUT, close_fds=True)
    stdout = p.stdout
    for line in stdout.readlines():
        if line != '\n':
            line = line.replace('\n', '')
            if 'Filesystem' in line or 'Disk quotas for user' in line:
                continue
            #print "==>%s"%line
            part = line.strip().split()[0]
            # sys.stderr.write("<? /* getQuota user=%s part='%s' line='%s' */ ?>\n" % (user, part, line))
            # if REMOTE in line:
            if part in REMOTES:
                size = line.split()[column]
                if used:
                    if int(line.split()[2]) == 0:
                        return (False, 0, 0, 0)
                    # print "==>%s"%line
                    percent = float(line.split()[1]) / float(line.split()[2]) * 100
                    # print "percent(%s)=%s/%s/100" %(percent, line.split()[1], line.split()[2])
                    # print "\n\n"
                    size = int(size) / 1024
                    # if user == 'pepe':
                    #     size = 8000
                    #     percent = 200
                    maxsize = int(line.split()[2]) / 1024
                    overquota = False
                    # print "%s %s > %s" % (user, percent, LIMIT)
                    # sys.stderr.write("%s %s > %s\n" % (user, percent, LIMIT))
                    if percent > LIMIT:
                        overquota = True
                    return (overquota, size, maxsize, "%0.2f%%" % percent)
    return (False, 0, 0, 0)


# get user lists
#samba-tool user list 2>/dev/null
def generateOverQuotas():
    txt = ""
    hostname = read_conf("LDAP_HOSTNAME")
    ignore = ["zentyal-squid-%s" % hostname,
              "dns-%s" % hostname,
              'Administrator',
              'max-control',
              'krbtgt',
              'Guest']

    args = ['samba-tool', 'user', 'list']
    p = subprocess.Popen(" ".join(args), shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
    while True:
        output = p.stdout.readline()

        if output.startswith('ldb_wrap'):
            continue
        if output.startswith('params.c'):
            continue
        if output.startswith('WARNING'):
            continue
        if output.startswith('NOTE'):
            continue
        #
        uid = output.strip()
        if uid in ignore:
            # sys.stderr.write("IGNORE user=%s\n" % uid)
            continue
        #
        # sys.stderr.write("user=%s\n" % uid)
        if uid != '':
            (overquota, size, maxsize, percent) = getQuota(uid, True)
            # sys.stderr.write("user=%s quota=%s\n" % (uid, getQuota(uid, True)))
            txt = txt + "$quotaArray['%s']=array('size'=>%s, 'maxsize'=> %s, 'percent'=>'%s', 'overQuota'=>%s);\n" \
                        % (uid, size, maxsize, percent, overquota)
            if overquota:
                txt = txt + "$overQuota['%s']=array('cn'=>'%s', 'size'=>%s, 'maxsize'=> %s, 'percent'=>'%s');\n" \
                            % (uid, uid, size, maxsize, percent)

        if output == '' and p.poll() is not None:
            break

    return txt


txt = """<?php

/* generated by pyoverquota on: "%s"
*
*  OVERQUOTA_LIMIT=%s%%
*/

global $quotaArray, $overQuota, $quotaTime;
$quotaTime="%s";
$overQuota=array();
$quotaArray=array();

""" % (time.asctime(), LIMIT, stamp)

txt = txt + generateOverQuotas()

txt = txt + """

"""

f = open(DEST_FILE, 'w')
f.write(txt)
f.close()

# delete lock file
sys.stderr.write("<? /* [%s] pyoverquota[%s]: Borrando lock...*/ ?>\n" % (stamp, os.getpid()))
os.unlink(LOCK_FILE)
